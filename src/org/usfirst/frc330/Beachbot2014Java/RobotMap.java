// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.Beachbot2014Java;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisLeftDrive1;
    public static SpeedController chassisLeftDrive2;
    public static SpeedController chassisLeftDrive3;
    public static SpeedController chassisRightDrive1;
    public static SpeedController chassisRightDrive2;
    public static SpeedController chassisRightDrive3;
    public static Compressor chassisCompressor;
    public static DoubleSolenoid chassisShiftSolenoid;
    public static Encoder chassisLeftDriveEncoder;
    public static Encoder chassisRightDriveEncoder;
    public static Gyro chassisGyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisLeftDrive1 = new Talon(1, 1);
	LiveWindow.addActuator("Chassis", "LeftDrive1", (Talon) chassisLeftDrive1);
        
        chassisLeftDrive2 = new Talon(1, 2);
	LiveWindow.addActuator("Chassis", "LeftDrive2", (Talon) chassisLeftDrive2);
        
        chassisLeftDrive3 = new Talon(1, 9);
	LiveWindow.addActuator("Chassis", "LeftDrive3", (Talon) chassisLeftDrive3);
        
        chassisRightDrive1 = new Talon(1, 3);
	LiveWindow.addActuator("Chassis", "RightDrive1", (Talon) chassisRightDrive1);
        
        chassisRightDrive2 = new Talon(1, 4);
	LiveWindow.addActuator("Chassis", "RightDrive2", (Talon) chassisRightDrive2);
        
        chassisRightDrive3 = new Talon(1, 10);
	LiveWindow.addActuator("Chassis", "RightDrive3", (Talon) chassisRightDrive3);
        
        chassisCompressor = new Compressor(1, 14, 1, 8);
	
        
        chassisShiftSolenoid = new DoubleSolenoid(1, 3, 4);      
	
        
        chassisLeftDriveEncoder = new Encoder(1, 5, 1, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("Chassis", "LeftDriveEncoder", chassisLeftDriveEncoder);
        chassisLeftDriveEncoder.setDistancePerPulse(1.0);
        chassisLeftDriveEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        chassisLeftDriveEncoder.start();
        chassisRightDriveEncoder = new Encoder(1, 7, 1, 8, false, EncodingType.k4X);
	LiveWindow.addSensor("Chassis", "RightDriveEncoder", chassisRightDriveEncoder);
        chassisRightDriveEncoder.setDistancePerPulse(1.0);
        chassisRightDriveEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        chassisRightDriveEncoder.start();
        chassisGyro = new Gyro(1, 1);
	LiveWindow.addSensor("Chassis", "Gyro", chassisGyro);
        chassisGyro.setSensitivity(0.007);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
