// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc330.Beachbot2013Java.subsystems;
import org.usfirst.frc330.Beachbot2013Java.RobotMap;
import org.usfirst.frc330.Beachbot2013Java.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.NetworkButton;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class Vision extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalOutput highShooterLED = RobotMap.visionHighShooterLED;
    DigitalOutput lowShooterLED = RobotMap.visionLowShooterLED;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    boolean highLEDstate, lowLEDstate;
    public Vision() {
        SmartDashboard.putBoolean("LEDEnable", false);
        highLEDstate = false;
        lowLEDstate = false;
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ControlLEDs());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void turnOnHighShooterLED()
    {
        highShooterLED.set(true);
        highLEDstate = true;
    }
    
    public void turnOffHighShooterLED()
    {
        highShooterLED.set(false);
        highLEDstate = false;
    }
    
    public void turnOnLowShooterLED()
    {
        lowShooterLED.set(true);
        lowLEDstate = true;
    }
    
    public void turnOffLowShooterLED()
    {
        lowShooterLED.set(false);
        lowLEDstate = false;
    }
    
    public boolean getLEDEnable()
    {
        return SmartDashboard.getBoolean("LEDEnable", false);
    }
    
    public boolean getHighLEDState()
    {
        return highLEDstate;
    }
    
    public boolean getLowLEDState()
    {
        return lowLEDstate;
    }
}
