// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc330.Beachbot2013Java;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import org.usfirst.frc330.Beachbot2013Java.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/*
 * $Log: OI.java,v $
 * Revision 1.28  2013-03-24 17:42:53  jross
 * climbing changes from LA regional
 *
 * Revision 1.27  2013-03-20 07:16:33  dstation
 * Add Blocker
 *
 * Revision 1.26  2013-03-20 06:06:43  dstation
 * add pickup toggle command
 *
 * Revision 1.25  2013-03-20 05:04:25  dstation
 * added climb button 11
 *
 * Revision 1.24  2013-03-18 00:36:38  echan
 * removed armpickup
 *
 * Revision 1.23  2013-03-17 18:22:25  jross
 * add shootLowCommandGroup to SmartDashboard
 *
 * Revision 1.22  2013-03-17 17:27:05  jross
 * Add PickupOffCommandGroup to safely turn off pickup and shooter
 *
 * Revision 1.21  2013-03-17 17:21:06  jross
 * change pickup buttons per Matt's direction
 *
 * Revision 1.20  2013-03-17 17:17:32  jross
 * use command group for shooting and pickup on
 *
 * Revision 1.19  2013-03-17 01:57:22  jdavid
 * Added pickup sensor
 *
 * Revision 1.18  2013-03-15 03:08:37  echan
 * Added the command to shoot low at full speed
 *
 * Revision 1.17  2013-03-15 02:50:16  echan
 * added cvs log comments
 *
 */
 
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shiftHighButton;
    public Joystick leftJoystick;
    public JoystickButton shiftLowButton;
    public JoystickButton shootButton;
    public Joystick rightJoystick;
    public JoystickButton blockerToggleButton;
    public JoystickButton pickupToggleButton;
    public JoystickButton shootHighButton;
    public JoystickButton shootLowButton;
    public JoystickButton armClimbingButton;
    public JoystickButton frisbeePickupOffButton;
    public JoystickButton frisbeePickupOnButton;
    public JoystickButton slowFrisbeePickupButton;
    public JoystickButton reversePickupButton;
    public JoystickButton climbButton;
    public Joystick operatorJoystick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        //TODO fix robotbuilder so that it knows about LiftRobotCommandGroup for climbButton and ArmPastClimbing for armClimbing Button
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        operatorJoystick = new Joystick(3);
        
        climbButton = new JoystickButton(operatorJoystick, 11);
        climbButton.whenPressed(new LiftRobotCommandGroup());
        reversePickupButton = new JoystickButton(operatorJoystick, 10);
        reversePickupButton.whenPressed(new ReversePickup());
        slowFrisbeePickupButton = new JoystickButton(operatorJoystick, 3);
        slowFrisbeePickupButton.whenPressed(new SlowPickupFrisbees());
        frisbeePickupOnButton = new JoystickButton(operatorJoystick, 7);
        frisbeePickupOnButton.whenPressed(new PickupOnCommandGroup());
        frisbeePickupOffButton = new JoystickButton(operatorJoystick, 6);
        frisbeePickupOffButton.whenPressed(new PickupOffCommandGroup());
        armClimbingButton = new JoystickButton(operatorJoystick, 5);
        armClimbingButton.whenPressed(new ArmPastClimbing());
        shootLowButton = new JoystickButton(operatorJoystick, 2);
        shootLowButton.whenPressed(new ShootLowCommandGroup());
        shootHighButton = new JoystickButton(operatorJoystick, 4);
        shootHighButton.whenPressed(new ArmHighShooting());
        pickupToggleButton = new JoystickButton(operatorJoystick, 8);
        pickupToggleButton.whenPressed(new PickupToggle());
        blockerToggleButton = new JoystickButton(operatorJoystick, 9);
        blockerToggleButton.whenPressed(new BlockerToggle());
        rightJoystick = new Joystick(2);
        
        shootButton = new JoystickButton(rightJoystick, 1);
        shootButton.whenPressed(new LaunchFrisbee());
        shiftLowButton = new JoystickButton(rightJoystick, 2);
        shiftLowButton.whenPressed(new ShiftLow());
        leftJoystick = new Joystick(1);
        
        shiftHighButton = new JoystickButton(leftJoystick, 2);
        shiftHighButton.whenPressed(new ShiftHigh());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("AutonomousCommand", new AutonomousCommand());
        SmartDashboard.putData("ShiftHigh", new ShiftHigh());
        SmartDashboard.putData("ShiftLow", new ShiftLow());
        SmartDashboard.putData("MarsRock", new MarsRock());
        SmartDashboard.putData("PickupDown", new PickupDown());
        SmartDashboard.putData("PickupUp", new PickupUp());
        SmartDashboard.putData("LaunchFrisbee", new LaunchFrisbee());
        SmartDashboard.putData("ShootHigh", new ShootHigh());
        SmartDashboard.putData("ShootLow", new ShootLow());
        SmartDashboard.putData("PickupFrisbeesOn", new PickupFrisbeesOn());
        SmartDashboard.putData("PickupFrisbeesOff", new PickupFrisbeesOff());
        SmartDashboard.putData("ReversePickup", new ReversePickup());
        SmartDashboard.putData("SlowPickupFrisbees", new SlowPickupFrisbees());
        SmartDashboard.putData("ArmLowShooting", new ArmLowShooting());
        SmartDashboard.putData("ArmHighShooting", new ArmHighShooting());
        SmartDashboard.putData("ArmClimbing", new ArmClimbing());
        SmartDashboard.putData("StopShootHigh", new StopShootHigh());
        SmartDashboard.putData("StopShootLow", new StopShootLow());
        SmartDashboard.putData("ShootLowCommandGroup", new ShootLowCommandGroup());
        SmartDashboard.putData("ControlLEDs", new ControlLEDs());
        SmartDashboard.putData("TurnCamera", new TurnCamera());
        SmartDashboard.putData("TurnCameraIterative", new TurnCameraIterative());
        SmartDashboard.putData("ArmLowPickup", new ArmLowPickup());
        SmartDashboard.putData("SetArmZero", new SetArmZero());
        SmartDashboard.putData("FullSpeedShootLow", new FullSpeedShootLow());
        SmartDashboard.putData("PickupOnCommandGroup", new PickupOnCommandGroup());
        SmartDashboard.putData("PickupOffCommandGroup", new PickupOffCommandGroup());
        SmartDashboard.putData("ArmVariableShooting", new ArmVariableShooting());
        SmartDashboard.putData("LiftRobot", new LiftRobot());
        SmartDashboard.putData("PickupToggle", new PickupToggle());
        SmartDashboard.putData("BlockerToggle", new BlockerToggle());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }
    public Joystick getRightJoystick() {
        return rightJoystick;
    }
    public Joystick getOperatorJoystick() {
        return operatorJoystick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
