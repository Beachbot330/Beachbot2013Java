// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc330.Beachbot2013Java.commands;
import edu.wpi.first.wpilibj.command.AutoSpreadsheetCommand;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc330.Beachbot2013Java.Robot;
/*
 * $Log: DriveTime.java,v $
 * Revision 1.7  2013-03-15 02:58:29  echan
 * robotbuilder update
 *
 * Revision 1.6  2013-03-15 02:50:37  echan
 * added cvs log comments
 *
 */
/**
 * Drives the robot manually. {@link #setParam1(double)} sets the speed of the
 * left side. {@link #setParam2(double) } sets the speed of the right side. 
 * {@link #setTimeout(double) } controls how long it drives. It automatically 
 * stops driving at the end.
 */
public class  DriveTime extends Command implements AutoSpreadsheetCommand {
    double left, right;
    
    public DriveTime(double timeout, double left, double right) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        setTimeout(timeout);
        this.left = left;
        this.right = right;
    }
        
    public DriveTime()
    {
        this(0,0,0);
    }
    
    // Called just before this Command runs the first time
    
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.chassis.tankDrive(-left, -right);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut();
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.chassis.tankDrive(0, 0);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
    /**
     * The output to send to the left motor
     * @param left speed. 0 is neutral. 1 is full forward. -1 is full reverse.
     */
    public void setParam1(double left) {
        this.left = left;
    }
    /**
     * The output to send to the right motor
     * @param right speed. 0 is neutral. 1 is full forward. -1 is full reverse.
     */
    public void setParam2(double right) {
        this.right = right;
    }
    /**
     * Not Used
     * @param param3 
     */
    public void setParam3(double param3) {
    }
    /**
     * Not Used. This command automatically stops at end.
     * @param stopAtEnd 
     */
    public void setStopAtEnd(boolean stopAtEnd) {
    }
    public Command copy() {
        return new DriveTime();
    }
}
