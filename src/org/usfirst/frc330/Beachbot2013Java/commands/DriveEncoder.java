// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc330.Beachbot2013Java.commands;
import edu.wpi.first.wpilibj.command.AutoSpreadsheetCommand;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc330.Beachbot2013Java.Robot;
/**
 *
 */
public class  DriveEncoder extends AutoSpreadsheetCommand {
    double position, tolerance;
    boolean stopAtEnd = false;
    
    public DriveEncoder(double position) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        this(position, 1, 0, false);
    }
    
    public DriveEncoder(double position, double tolerance)
    {
        this(position, tolerance, 0, false);
    }
    
    public DriveEncoder(double position, double tolerance, double timeout, boolean stopAtEnd) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.position = position;
        setTimeout(timeout);
        this.stopAtEnd = stopAtEnd;
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.chassis.gyroPIDLow.disable();
        if (Robot.chassis.getShiftState())
        {
            Robot.chassis.leftDrivePIDLow.setSetpoint(position);
            Robot.chassis.rightDrivePIDLow.setSetpoint(position);
            Robot.chassis.leftDrivePIDLow.enable();
            Robot.chassis.rightDrivePIDLow.enable();
            Robot.chassis.leftDrivePIDLow.setAbsoluteTolerance(tolerance);
            Robot.chassis.rightDrivePIDLow.setAbsoluteTolerance(tolerance);
        }
        else
        {
            Robot.chassis.leftDrivePIDHigh.setSetpoint(position);
            Robot.chassis.rightDrivePIDHigh.setSetpoint(position);
            Robot.chassis.leftDrivePIDHigh.enable();
            Robot.chassis.rightDrivePIDHigh.enable(); 
            Robot.chassis.leftDrivePIDHigh.setAbsoluteTolerance(tolerance);
            Robot.chassis.rightDrivePIDHigh.setAbsoluteTolerance(tolerance);
        }
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.chassis.pidDrive();
        SmartDashboard.putNumber("leftEncoder", Robot.chassis.getLeftDistance());
        SmartDashboard.putNumber("rightEncoder", Robot.chassis.getRightDistance());
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if (!Robot.chassis.getShiftState())
        {
            if (Robot.chassis.leftDrivePIDLow.onTarget() || Robot.chassis.rightDrivePIDLow.onTarget() || isTimedOut())
            {
                return true;            
            }
        }
        else if (Robot.chassis.leftDrivePIDHigh.onTarget() || Robot.chassis.rightDrivePIDHigh.onTarget() || isTimedOut())
        {
                return true;            
        }
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        if (stopAtEnd)
        {
            Robot.chassis.gyroPIDLow.disable();
            Robot.chassis.leftDrivePIDLow.disable();
            Robot.chassis.rightDrivePIDLow.disable();
            Robot.chassis.leftDrivePIDHigh.disable();
            Robot.chassis.rightDrivePIDHigh.disable();
            Robot.chassis.tankDrive(0, 0);
        }
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        stopAtEnd = true;
        end();
    }
    public void setParam1(double distance) {
        this.position = distance;
    }
    public void setParam2(double tolerance) {
        this.tolerance = tolerance;
    }
    public void setParam3(double param3) {
    }
    public void setStopAtEnd(boolean stopAtEnd) {
        this.stopAtEnd = stopAtEnd;
    }
    public AutoSpreadsheetCommand copy() {
        return new DriveEncoder(0);
    }
}
