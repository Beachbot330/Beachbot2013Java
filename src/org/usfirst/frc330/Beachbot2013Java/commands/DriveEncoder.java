// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc330.Beachbot2013Java.commands;
import edu.wpi.first.wpilibj.command.AutoSpreadsheetCommand;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc330.Beachbot2013Java.Robot;
import org.usfirst.frc330.Beachbot2013Java.subsystems.Chassis;
/*
 * $Log: DriveEncoder.java,v $
 * Revision 1.8  2013-03-03 03:14:07  jross
 * whitespace changes from RobotBuilder
 *
 * Revision 1.7  2013-02-25 02:08:54  jross
 * Change to use MultiPrefSendablePIDController
 *
 * Revision 1.6  2013-02-17 02:53:43  jross
 * update javadocs
 *
 */
/**
 * Drive the robot a specified distance using encoders and PID only. Finish when
 * one of the encoders is within the specified {@link #setParam2(double) tolerance}. 
 * The {@link #setParam1(double) distance} is relative to the
 * Robot's starting position. DriveEncoder should not be used if the robot has turned. 
 * {@link DriveEncoderRel} should be used in this case.
 * <p>
 * For example, to drive 10 feet forward, set distance to 120 (inches).
 * A reasonable tolerance is 3 inches for normal movements. This will stop the robot
 * when it is between 117 - 123 inches. If a smaller
 * tolerance is used, the robot may not ever reach the tolerance, and the 
 * {@link #setTimeout(double) timeout} will be exceeded. This will slow down the
 * execution of future commands.
 * 
 * @see DriveEncoderRel
 * @see DriveEncoderGyro
 * 
 * @author Joe
 */
public class  DriveEncoder extends Command implements AutoSpreadsheetCommand {
    double leftDistance, rightDistance, tolerance;
    boolean stopAtEnd = false;
    
    public DriveEncoder()
    {
        this(0,0,0,false);
    }
    
    public DriveEncoder(double distance) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        this(distance, 0, 0, false);
    }
    
    public DriveEncoder(double distance, double tolerance)
    {
        this(distance, tolerance, 0, false);
    }
    
    public DriveEncoder(double distance, double tolerance, double timeout, boolean stopAtEnd)
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.leftDistance = distance;
        this.rightDistance = distance;
        this.tolerance = tolerance;
        setTimeout(timeout);
        this.stopAtEnd = stopAtEnd;
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.chassis.gyroPID.disable();
        if (!Robot.chassis.getShiftState())
        {
            Robot.chassis.leftDrivePID.setGainName(Chassis.DRIVELOW);
            Robot.chassis.rightDrivePID.setGainName(Chassis.DRIVELOW);
        }
        else
        {
             Robot.chassis.leftDrivePID.setGainName(Chassis.DRIVEHIGH);
             Robot.chassis.rightDrivePID.setGainName(Chassis.DRIVEHIGH);
        }
        Robot.chassis.leftDrivePID.setSetpoint(leftDistance);
        Robot.chassis.rightDrivePID.setSetpoint(rightDistance);
        Robot.chassis.leftDrivePID.enable();
        Robot.chassis.rightDrivePID.enable();
        Robot.chassis.leftDrivePID.setAbsoluteTolerance(tolerance);
        Robot.chassis.rightDrivePID.setAbsoluteTolerance(tolerance);
        
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if (Robot.chassis.leftDrivePID.onTarget() || Robot.chassis.rightDrivePID.onTarget() || isTimedOut())
        {
                return true;            
        }
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        if (stopAtEnd)
        {
            Robot.chassis.stopDrive();
        }
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        stopAtEnd = true;
        end();
    }
    
    /**
     * The first parameter in the AutoSpreadsheet, distance. 
     * The distance to drive in inches from the starting point of the robot. 
     * To drive 10 feet forward, set distance to 120 (inches). To drive backwards
     * set the distance negative. To drive to the starting position, set a
     * distance of 0.
     * @param distance distance to drive in inches
     */
    public void setParam1(double distance) {
        this.leftDistance = distance;
        this.rightDistance = distance;
    }
    /**
     * The second parameter in the AutoSpreadsheet, tolerance. 
     * The tolerance in inches for how close to be to the distance before stopping.
     * 3 inches is a reasonable tolerance for normal movements. If a smaller
     * tolerance is used, the robot may not ever reach the tolerance, and the 
     * {@link #setTimeout(double) timeout} may be reached.
     * @param tolerance in inches
     * @see edu.wpi.first.wpilibj.PIDController#setAbsoluteTolerance
     */
    public void setParam2(double tolerance) {
        this.tolerance = tolerance;
    }
    /**
     * Not Used
     * @param param3 
     */
    public void setParam3(double param3) {
    }
    /**
     * Stop the drive train at the end of the command
     * @param stopAtEnd if true, stop the drive train at the end of the command.
     *  If false, keep the PID running at the end so the robot keeps its position
     */
    public void setStopAtEnd(boolean stopAtEnd) {
        this.stopAtEnd = stopAtEnd;
    }
    public Command copy() {
        return new DriveEncoder();
    }
}
