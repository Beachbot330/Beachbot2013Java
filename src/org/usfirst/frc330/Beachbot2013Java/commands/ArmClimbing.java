// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc330.Beachbot2013Java.commands;
import edu.wpi.first.wpilibj.command.AutoSpreadsheetCommand;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc330.Beachbot2013Java.Robot;
/*
 * $Log: ArmClimbing.java,v $
 * Revision 1.11  2013-04-02 03:59:02  jross
 * turn off shooter
 *
 * Revision 1.10  2013-03-24 17:48:04  jross
 * Set flags on dashboard to take screenshot and turn up brightness on camera
 *
 * Revision 1.9  2013-03-21 07:04:25  jross
 * make pickup go up when climbing, if safe
 *
 * Revision 1.8  2013-03-16 21:17:47  jross
 * add javadocs
 *
 * Revision 1.7  2013-03-15 03:14:42  echan
 * Removed holdArmOff/On and the brake arm solenoid
 *
 * Revision 1.6  2013-03-15 02:50:23  echan
 * added cvs log comments
 *
 */
/**
 * Move the arm to the climbing position. The climbing position is defined by
 * the preference "armSetpointClimbing".
 */
public class  ArmClimbing extends Command implements AutoSpreadsheetCommand{
    public ArmClimbing() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.arm);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooterLow);
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.arm.armSetPointClimbing();
        Robot.arm.enable();
        Robot.frisbeePickup.setFrisbeePickupUp();
        SmartDashboard.putBoolean("BrightCamera", true);
        SmartDashboard.putBoolean("TakeScreenshot", true);
    }
    // Called repeatedly when this Command is scheduled to run
    int counter = 0;
    protected void execute() {
        if (counter%5 == 0)
            SmartDashboard.putNumber("ArmPosition", Robot.arm.getArmPosition());
        counter++;
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return Robot.arm.onTarget();
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    /**
     * Not Used
     * @param param1 
     */
    public void setParam1(double param1) {
    }
    /**
     * Not Used
     * @param param2 
     */
    public void setParam2(double param2) {
    }
    /**
     * Not Used
     * @param param3 
     */
    public void setParam3(double param3) {
    }
    /**
     * Not Used
     * @param stopAtEnd 
     */
    public void setStopAtEnd(boolean stopAtEnd) {
    }
    public Command copy() {
        return new ArmClimbing();
    }
}
